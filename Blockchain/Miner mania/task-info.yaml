type: edu
files:
- name: src/blockchain/Main.java
  visible: true
  text: |+
    package blockchain;

    import blockchain.block.Blockchain;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            System.out.print("Enter how many zeros the hash must start with: ");
            final var zeros = new Scanner(System.in).nextInt();
            System.out.println();
            final var blockchain = Blockchain.getInstance(zeros);
            blockchain.generateBlocks(5);
            System.out.println(blockchain);
        }
    }


  learner_created: false
- name: src/blockchain/block/Block.java
  visible: true
  text: |
    package blockchain.block;


    import lombok.Data;
    import java.io.Serial;
    import java.io.Serializable;
    import java.time.Duration;
    import java.time.Instant;
    import java.util.Date;
    import java.util.Random;
    import static blockchain.StringUtil.applySha256;

    @Data
    public class Block implements Serializable {

        @Serial
        private static final long serialVersionUID = 1738588544404978242L;
        private final int id;
        private final long timestamp;
        private final String prevBlockHash;
        private long magicNumber;
        private String blockHash;
        private int timeToGenerate;

        public static Block getProved(int id,
                                      String prevBlockHash,
                                      int zeroes) {

            final var startTime = Instant.now();
            final var block = new Block(id,
                                        new Date().getTime(),
                                        prevBlockHash);
            block.findMagicNumber(zeroes);
            block.timeToGenerate = Math.toIntExact(
                            Duration
                                    .between(startTime, Instant.now())
                                    .toSeconds());
            return block;
        }
        private Block(int id,
                      long timestamp,
                      String prevBlockHash) {
            this.id = id;
            this.timestamp = timestamp;
            this.prevBlockHash = prevBlockHash;
        }

        @Override
        public String toString() {
            return String.format("""
                                    Block:\s
                                    Id: %d\s
                                    Timestamp: %d\s
                                    Magic number: %d\s
                                    Hash of the previous block:\s
                                    %s\s
                                    Hash of the block:\s
                                    %s\s
                                    Block was generating for %d seconds""",
                    id,
                    timestamp,
                    magicNumber,
                    prevBlockHash,
                    blockHash,
                    timeToGenerate);
        }

        private void findMagicNumber(int zeroes) {
            final var random = new Random();
            var hash = "";
            do {
                magicNumber = random.nextLong();
                hash = applySha256(stringify());
            } while (!isProved(zeroes, hash));
            blockHash = hash;
        }
        public boolean isProved(int zeroes) {
            return isProved(zeroes,
                    applySha256(stringify()));
        }

        private boolean isProved(int zeroes, String blockHash) {
            for (int i = 0; i < zeroes; i++) {
                if (blockHash.charAt(i) != '0') {
                    return false;
                }
            }
            return true;
        }

        private String stringify() {
            return "" +
                    id +
                    timestamp +
                    prevBlockHash +
                    magicNumber;
        }
    }
  learner_created: false
- name: src/blockchain/block/Blockchain.java
  visible: true
  text: |
    package blockchain.block;

    import blockchain.SerialDeSerial;
    import java.io.IOException;
    import java.io.Serial;
    import java.io.Serializable;
    import java.util.List;
    import java.util.ArrayList;

    public class Blockchain implements Serializable {

        @Serial
        private static final long serialVersionUID = 3705442926703754261L;
        private final List<Block> blocks;
        private final int zeroes;

        public static Blockchain getInstance(int zeroes) {
            return new Blockchain(zeroes);
        }

        private Blockchain(int zeroes) {
            this.blocks = new ArrayList<>();
            this.zeroes = zeroes;
        }

        @Override
        public String toString() {
            final var sb = new StringBuilder();
            for (var block : blocks) {
                sb.append(block).append("\n\n");
            }
            return String.valueOf(sb);
        }

        public void generateBlocks(int blocksNumber) {
            for (var i = 0; i < blocksNumber; i++) {
                generateBlock();
            }
        }

        private void generateBlock() {
            blocks
                    .add(Block.getProved(
                    blocks.size(), blocks.isEmpty()
                                    ? "0" : blocks
                                     .get(blocks.size() - 1)
                                     .getBlockHash(), zeroes));
            try {
                SerialDeSerial.serialize(this,
                                "./Database.txt");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public boolean isValid() {
            for (var i = 0; i < blocks.size(); i++) {

                if (i == 0) {
                    if (!blocks
                            .get(i)
                            .getPrevBlockHash()
                            .equals("0"))
                        return false;
                } else {
                    if (!blocks
                            .get(i)
                            .getPrevBlockHash()
                            .equals(
                                    blocks
                                            .get(i - 1)
                                            .getBlockHash()))
                        return false;
                }
                if (!blocks.get(i).isProved(zeroes))
                    return false;
            }
            return true;
        }
    }
  learner_created: false
- name: Database.txt
  visible: true
  text: "��\0\x05sr\0\eblockchain.block.Blockchain3l`���<\x15\x02\0\x02I\0\x06zeroesL\0\
    \x06blockst\0\x10Ljava/util/List;xp\0\0\0\x02sr\0\x13java.util.ArrayListx��\x1d\
    ��a�\x03\0\x01I\0\x04sizexp\0\0\0\x05w\x04\0\0\0\x05sr\0\x16blockchain.block.Block\x18\
    \ �\x11��zB\x02\0\x06I\0\x02idJ\0\vmagicNumberI\0\x0etimeToGenerateJ\0\ttimestampL\0\
    \tblockHasht\0\x12Ljava/lang/String;L\0\nprevBlockHashq\0~\0\x06xp\0\0\0\0�d\x1d\
    �\x06V+f\0\0\0\0\0\0\x01��\n�\x10t\0@0032ade335adc93aee375ebf9fe7c0734929a4e06dacd2ea3ad7e5e4a631bebdt\0\
    \x010sq\0~\0\x05\0\0\0\x01��]\n �V�\0\0\0\0\0\0\x01��\n�Rt\0@001aba86173044036fc8ea2ea84386fb1b9aad13ad759b5587115793a9ad9163q\0\
    ~\0\bsq\0~\0\x05\0\0\0\x02t��}���\0\0\0\0\0\0\x01��\n�Ut\0@009df7703e0322c96afe254c796b8f355035cf3948531dab3cf22e0145342ae3q\0\
    ~\0\vsq\0~\0\x05\0\0\0\x03�\b\x17��,W�\0\0\0\0\0\0\x01��\n�bt\0@009521a80d64679c72f334fe44507e42bae319b6c27bce6a0ef87f9b7186e90eq\0\
    ~\0\nsq\0~\0\x05\0\0\0\x04��g���U�\0\0\0\0\0\0\x01��\n�vt\0@0045a661f20d5c1a5593a6b7025a41282f9d9b4d4bee2b3a2e8d7c606052a589q\0\
    ~\0\x0fx"
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                        "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            if (!lines.get(10).toUpperCase().startsWith("N ")) {
                throw new BlockParseException("11-th line of every block " +
                        "should be state what happened to N");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                        "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/block/BlockchainFactory.java
  visible: true
  learner_created: true
- name: src/blockchain/util/SerialDeSerial.java
  visible: true
  learner_created: true
- name: src/blockchain/util/Pause.java
  visible: true
  learner_created: true
- name: src/blockchain/util/StringUtil.java
  visible: true
  learner_created: true
- name: src/blockchain/block/BlockMiner.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5415#comment
status: Solved
record: 2
