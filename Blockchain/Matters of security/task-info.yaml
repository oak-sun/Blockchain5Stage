type: edu
files:
- name: src/blockchain/Main.java
  visible: true
  text: |+
    package blockchain;

    import java.util.List;

    public class Main {
        public static void main(String[] args) {
            var blocksNumber = 5;
            var zeros = 0;
            var miners = 10;
            Executor<Miner> parallelExecutor = new Executor<>(12,
                                                              miners);

            List<List<String>> messagesList = List.of(
                                       List.of(),
                                       List.of("Vladimir: Hey, I'm first!"),
                                       List.of("Oxana: It's not fair!",
                                              "Oxana: You always will be " +
                                                      "first because it is your " +
                                                      "blockchain!",
                                              "Oxana: Anyway, thank you for this" +
                                                      " amazing chat."),
                                       List.of("Vladimir: You're welcome :)",
                                               "Valeriy: Hey Vladimir, nice chat"),
                                       List.of());

            Block cursor = null;

            for (int i = 0; i < blocksNumber; i++) {
                var finalCursor = cursor;
                var finalZeros = zeros;
                List<String> messages = messagesList.get(i);
                Miner miner = parallelExecutor.execute(
                        id -> new Miner(id,
                                        finalCursor,
                                        finalZeros,
                                        messages)::mine);

                cursor = miner.getBlock();
                printBlock(cursor, miner);
                var miningDuration = cursor.getMiningDuration();

                if (miningDuration < 10) {
                    zeros++;
                    System.out.println("N was increased to "
                                       + zeros);
                } else if (miningDuration > 30) {
                    zeros--;
                    System.out.println("N was decreased by 1");
                } else {
                    System.out.println("N stays the same");
                }
                System.out.println();
            }
        }
        private static void printBlock(Block block,
                                       Miner miner) {
            var message = block.getMessage();
            message = message == null ?
                                "no messages" :
                                 System.lineSeparator() + message;
            System.out.printf("Block:%n" +
                            "Created by miner # %d%n" +
                            "Id: %d%n" +
                            "Timestamp: %d%n" +
                            "Magic number: %d%n" +
                            "Hash of the previous block: %n" +
                            "%s%n" +
                            "Hash of the block: %n" +
                            "%s%n" +
                            "Block data: %s%n" +
                            "Block was generating for %d seconds%n",
                            miner.getId(),
                            block.getUid(),
                            block.getTimestamp(),
                            block.getMagicNumber(),
                            block.getPreviousHash(),
                            block.getHash(),
                            message,
                            block.getMiningDuration());
        }
    }




  learner_created: false
- name: src/blockchain/util/StringUtil.java
  visible: true
  text: |-
    package blockchain.util;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    public class StringUtil {
        public static String applySha256(String input){
            try {
                /* Applies sha256 to our input */
                var hash =  MessageDigest
                                  .getInstance("SHA-256")
                                  .digest(input
                                          .getBytes(StandardCharsets.UTF_8));
                var hexString = new StringBuilder();
                for (byte elem: hash) {
                    var hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                        "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                        "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                        "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/management/CryptoManager.java
  visible: true
  learner_created: true
- name: src/blockchain/model/factories/ChatFactory.java
  visible: true
  learner_created: true
- name: src/blockchain/model/factories/MagicFactory.java
  visible: true
  learner_created: true
- name: src/blockchain/model/factories/BlockFactory.java
  visible: true
  learner_created: true
- name: src/blockchain/util/Serializer.java
  visible: true
  learner_created: true
- name: src/blockchain/management/KeysManager.java
  visible: true
  learner_created: true
- name: src/blockchain/management/HashesManager.java
  visible: true
  learner_created: true
- name: src/blockchain/model/block/Block.java
  visible: true
  learner_created: true
- name: src/blockchain/model/block/Blockchain.java
  visible: true
  learner_created: true
- name: src/blockchain/model/chat/Chatbot.java
  visible: true
  learner_created: true
- name: src/blockchain/model/chat/Post.java
  visible: true
  learner_created: true
- name: src/blockchain/model/chat/Postman.java
  visible: true
  learner_created: true
- name: src/blockchain/management/ReviewManager.java
  visible: true
  learner_created: true
- name: src/blockchain/model/block/BlockMiner.java
  visible: true
  learner_created: true
- name: src/blockchain/management/TasksManager.java
  visible: true
  learner_created: true
- name: ./blockchain.txt
  visible: true
  learner_created: true
- name: ./Database.txt
  visible: true
  learner_created: true
- name: blockchain.data
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5417#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 26 Oct 2022 14:50:10 UTC
record: 4
